<script src="~/lib/jquery-validation/dist/jquery.validate.min.js"></script>
<script src="~/lib/jquery-validation-unobtrusive/jquery.validate.unobtrusive.min.js"></script>
<script src="~/lib/jquery-ajax-unobtrusive/jquery.unobtrusive-ajax.min.js"></script>
<script>
    var settings = {
        validClass: "is-valid",
        errorClass: "is-invalid"

    };
    $.validator.setDefaults(settings);
    $.validator.unobtrusive.options = settings;

    function validaCPF(value) {
        var cpf = value.replace(/[^0-9]/gi, ''); //Remove tudo que não for número
        if (value.length == 0)
            return true; //vazio
        if (cpf.length != 11 || cpf == "00000000000" || cpf == "11111111111" || cpf == "22222222222" || cpf == "33333333333" || cpf == "44444444444" || cpf == "55555555555" || cpf == "66666666666" || cpf == "77777777777" || cpf == "88888888888" || cpf == "99999999999")
            return false;
        add = 0;
        for (i = 0; i < 9; i++)
            add += parseInt(cpf.charAt(i)) * (10 - i);
        rev = 11 - (add % 11);
        if (rev == 10 || rev == 11)
            rev = 0;
        if (rev != parseInt(cpf.charAt(9)))
            return false;
        add = 0;
        for (i = 0; i < 10; i++)
            add += parseInt(cpf.charAt(i)) * (11 - i);
        rev = 11 - (add % 11);
        if (rev == 10 || rev == 11)
            rev = 0;
        if (rev != parseInt(cpf.charAt(10)))
            return false;
        return true; //cpf válido
    }

    function validaTelefone(value) {
        var telefone = value.replace(/[^0-9]/gi, ''); //Remove tudo que não for número

        if (value.length == 0)
            return true; //vazio
        if (telefone.length != 10 && telefone.length != 11)
            return false;

        if (telefone.charAt(0) == 0)
            return false;

        if (new RegExp("^[0\0]+$").test(telefone) || new RegExp("^[1\1]+$").test(telefone) || new RegExp("^[2\2]+$").test(telefone) || new RegExp("^[3\3]+$").test(telefone) ||
            new RegExp("^[4\4]+$").test(telefone) || new RegExp("^[5\5]+$").test(telefone) || new RegExp("^[6\6]+$").test(telefone) || new RegExp("^[7\7]+$").test(telefone) ||
            new RegExp("^[8\8]+$").test(telefone) || new RegExp("^[9\9]+$").test(telefone))
        return false;

        return true;
    }

    function validaEmail(value) {
       var codeArroba = String.fromCharCode(64);
       usuario = value.substring(0, value.indexOf(codeArroba));
       dominio = value.substring(value.indexOf(codeArroba) + 1, value.length);

       if ((usuario.length >= 1) && (usuario.search(" ") == -1) && (usuario.search(codeArroba) == -1) &&
           (dominio.length >= 3) && (dominio.search(codeArroba) == -1) && (dominio.search(" ") == -1) &&
           (dominio.search(".") != -1) && (dominio.indexOf(".") >= 1) && (dominio.lastIndexOf(".") < dominio.length - 1))    {


           return true;
           //var validadorEmail = "^\w+([.-_+]?\w+)*"+codeArroba+"\w+([.-]?\w+)*(\.\w{2,10})+$";
           //alert(validadorEmail);
           // var validadorEmail = /^\w+([.-_+]?\w+)*\w+([.-]?\w+)*(\.\w{2,10})+$/;

           // if (validadorEmail.test(value)) {
           //     return true;
           // } else {
           //     return false;
           // }
       }
       else {
           return false;
       }
    }


    $.validator.addMethod("cpf", function (value, element, param) {
        return validaCPF(value);
    }, "CPF inválido");
    $.validator.unobtrusive.adapters.addBool("cpf");

    $.validator.addMethod("telefone", function (value, element, param) {
        return validaTelefone(value);
    }, "Telefone inválido");
    $.validator.unobtrusive.adapters.addBool("telefone");

    $.validator.addMethod("email", function (value, element, param) {
        return validaEmail(value);
    }, "Email inválido");
    $.validator.unobtrusive.adapters.addBool("email");

</script>
