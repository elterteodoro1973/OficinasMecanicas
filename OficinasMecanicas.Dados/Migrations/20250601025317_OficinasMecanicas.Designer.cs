// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using OficinasMecanicas.Dados.Contexto;
using OficinasMecanicas.Dominio.Entidades;

#nullable disable

namespace WebApplication1.Migrations
{
    [DbContext(typeof(DbContexto))]
    [Migration("20250601025317_OficinasMecanicas")]
    partial class OficinasMecanicas
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("WebApplication1.Models.AgendamentoVisita", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DataHora")
                        .HasColumnType("datetime");

                    b.Property<string>("Descricao")
                        .HasMaxLength(256)
                        .IsUnicode(false)
                        .HasColumnType("varchar(256)");

                    b.Property<Guid?>("IdOficina")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("IdUsuario")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id")
                        .HasName("PK_AgendamentosVisita");

                    b.HasIndex("IdOficina");

                    b.HasIndex("IdUsuario");

                    b.ToTable("AgendamentoVisita");
                });

            modelBuilder.Entity("WebApplication1.Models.OficinaMecanica", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("Endereco")
                        .HasMaxLength(256)
                        .IsUnicode(false)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("Nome")
                        .HasMaxLength(256)
                        .IsUnicode(false)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("Servicos")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.HasKey("Id");

                    b.ToTable("OficinaMecanica");
                });

            modelBuilder.Entity("WebApplication1.Models.ResetarSenha", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<DateTime>("DataExpiracao")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("DataSolicitacao")
                        .HasColumnType("datetime");

                    b.Property<bool?>("Efetivado")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool?>("Excluido")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Token")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<Guid>("UsuarioId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UsuarioId");

                    b.ToTable("ResetarSenha");
                });

            modelBuilder.Entity("WebApplication1.Models.ServicosPrestados", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Nome")
                        .HasMaxLength(256)
                        .IsUnicode(false)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id")
                        .HasName("PK_Servico");

                    b.ToTable("ServicosPrestados");
                });

            modelBuilder.Entity("WebApplication1.Models.Usuarios", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .IsUnicode(false)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasMaxLength(512)
                        .IsUnicode(false)
                        .HasColumnType("varchar(512)");

                    b.Property<string>("Username")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id")
                        .HasName("PK_Usuario");

                    b.ToTable("Usuarios");
                });

            modelBuilder.Entity("WebApplication1.Models.AgendamentoVisita", b =>
                {
                    b.HasOne("WebApplication1.Models.OficinaMecanica", "IdOficinaNavigation")
                        .WithMany("AgendamentoVisita")
                        .HasForeignKey("IdOficina")
                        .HasConstraintName("FK_AgendamentoVisita_OficinaMecanica");

                    b.HasOne("WebApplication1.Models.Usuarios", "IdUsuarioNavigation")
                        .WithMany("AgendamentoVisita")
                        .HasForeignKey("IdUsuario")
                        .HasConstraintName("FK_AgendamentoVisita_Usuarios");

                    b.Navigation("IdOficinaNavigation");

                    b.Navigation("IdUsuarioNavigation");
                });

            modelBuilder.Entity("WebApplication1.Models.ResetarSenha", b =>
                {
                    b.HasOne("WebApplication1.Models.Usuarios", "Usuario")
                        .WithMany("ResetarSenha")
                        .HasForeignKey("UsuarioId")
                        .IsRequired()
                        .HasConstraintName("FK_ResetarSenha_Usuarios");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("WebApplication1.Models.OficinaMecanica", b =>
                {
                    b.Navigation("AgendamentoVisita");
                });

            modelBuilder.Entity("WebApplication1.Models.Usuarios", b =>
                {
                    b.Navigation("AgendamentoVisita");

                    b.Navigation("ResetarSenha");
                });
#pragma warning restore 612, 618
        }
    }
}
